generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      =  env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User { 
  id        Int @id @default(autoincrement())
  email     String  @unique
  name      String
  address   String?
  password  String
  iv        String  
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  phone     String?  @unique
  currencySymbol String @default("â‚¹")
  currencyCode   String @default("INR")
  isActive Boolean @default(true)
  isDeleted Boolean @default(false) 

  userFeaturePermissions  UserFeaturePermission[]
}

model VehicleGroup { 
  id       Int @id @default(autoincrement())
  name     String  @unique
  description   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  isDeleted Boolean @default(false) 

  vehicles Vehicle[] 
}

model Vehicle {
  id                 Int      @id @default(autoincrement())
  registrationNo     String   @unique
  vehicleName        String   @unique
  model              String
  chasisNo           String   @unique
  engineNo           String   @unique
  manufacturedBy     String
  vehicleColor       String?
  registrationExpiry DateTime
  isActive           Boolean  @default(true)
  image              String?
  doc                String?
  isDeleted Boolean @default(false) 

  vehicleGroupId    Int 
  vehicleGroup      VehicleGroup @relation(fields: [vehicleGroupId], references: [id] , onDelete : Cascade)

  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())

  reminders Reminder[]
  fuelEntries  Fuel[]
  bookings Booking[]
  maintenanceEntries Maintenance[]
  incomeExpense IncomeExpense[]
}

model Driver {
  id             Int      @id @default(autoincrement())
  name           String
  mobileNo       String  @unique
  age            Int
  address        String
  licenseNo      String   @unique
  licenseExpiry  DateTime
  dateOfJoining  DateTime
  totalExp       Int
  notes          String?
  image          String?
  doc            String?
  status         CustomStatus @default(Active) 
  isDeleted      Boolean  @default(false) 
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  password       String  
  iv             String  

  fuelEntries  Fuel[] 
  bookings Booking[]
}

enum CustomStatus {
  Active
  Inactive
}

model Customer {
  id             Int      @id @default(autoincrement())
  name           String
  mobileNo       String  @unique
  email          String  @unique
  address        String
  status         CustomStatus @default(Active) 
  isDeleted      Boolean  @default(false) 
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  bookings Booking[]
}

model Fuel {
  id              Int      @id @default(autoincrement())
  vehicleId       Int
  vehicle         Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  driverId        Int
  driver          Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
  fillDate        DateTime
  quantity        Float
  odometerReading Int
  amount          Float
  comments        String?  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Reminder {
  id              Int      @id @default(autoincrement())
  reminderDate    DateTime
  message         String? 
  vehicleId       Int
  vehicle         Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Booking {
  id               Int @id @default(autoincrement())
  customerId       Int
  customer         Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  vehicleId        Int
  vehicle          Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  driverId         Int?
  driver           Driver?  @relation(fields: [driverId], references: [id], onDelete: Cascade)
  tripType         String
  tripStartDate    DateTime
  tripEndDate      DateTime
  tripStartPincode String  @default("000000") 
  tripEndPincode   String  @default("000000") 
  tripStartLoc     String
  tripEndLoc       String
  totalKm          Float
  totalAmt         Float
  tripStatus       String
  isDeleted        Boolean  @default(false) 
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  invoiceNo        String  @unique

  payments Payment[]
  tripExpenses TripExpense[]
}

model Payment {
  id              Int      @id @default(autoincrement())
  bookingId       Int
  booking         Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  paidAmount      Float   
  pendingAmount   Float   
  notes           String?  
  isDeleted       Boolean  @default(false) 
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PartsInventory {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  stock          Int
  status         CustomStatus @default(Active) 
  isDeleted      Boolean  @default(false) 
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  maintenanceEntries MaintenanceParts[] @relation("PartsInventoryToMaintenanceParts")
}


model Maintenance {
  id               Int @id @default(autoincrement())
  vehicleId        Int
  vehicle          Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  startDate        DateTime
  endDate          DateTime
  details          String?
  totalCost        Float
  vendorName       String
  status           String
  isDeleted        Boolean  @default(false) 
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  parts            MaintenanceParts[]
}

model MaintenanceParts {
  id               Int @id @default(autoincrement())
  maintenanceId    Int
  maintenance      Maintenance @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
  
  partsInventoryId Int
  partsInventory   PartsInventory @relation(fields: [partsInventoryId], references: [id], onDelete: Cascade, name: "PartsInventoryToMaintenanceParts")

  quantity         Int
}

model IncomeExpense {
  id            Int @id @default(autoincrement())
  vehicleId     Int
  vehicle       Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  date          DateTime
  type          String
  amount        Float
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  isDeleted     Boolean @default(false) 
}

model TripExpense {
  id          Int      @id @default(autoincrement())
  bookingId   Int
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  amount      Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
}

model Feature {
  id          Int @id @default(autoincrement())
  name        String
  code        String @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  userFeaturePermissions  UserFeaturePermission[]

}

model Permission {
  id          Int @id @default(autoincrement())
  name        String
  code        String @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  userFeaturePermissions  UserFeaturePermission[]

}


model UserFeaturePermission {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [id])
  userId       Int

  feature      Feature     @relation(fields: [featureId], references: [id])
  featureId    Int

  permission   Permission  @relation(fields: [permissionId], references: [id])
  permissionId Int

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([userId, featureId, permissionId]) 
}







